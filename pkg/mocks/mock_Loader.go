// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockLoader is an autogenerated mock type for the Loader type
type MockLoader struct {
	mock.Mock
}

type MockLoader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoader) EXPECT() *MockLoader_Expecter {
	return &MockLoader_Expecter{mock: &_m.Mock}
}

// Load provides a mock function with given fields: _a0
func (_m *MockLoader) Load(_a0 interface{}) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoader_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockLoader_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *MockLoader_Expecter) Load(_a0 interface{}) *MockLoader_Load_Call {
	return &MockLoader_Load_Call{Call: _e.mock.On("Load", _a0)}
}

func (_c *MockLoader_Load_Call) Run(run func(_a0 interface{})) *MockLoader_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockLoader_Load_Call) Return(_a0 error) *MockLoader_Load_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoader_Load_Call) RunAndReturn(run func(interface{}) error) *MockLoader_Load_Call {
	_c.Call.Return(run)
	return _c
}

// LoadCtx provides a mock function with given fields: _a0, _a1
func (_m *MockLoader) LoadCtx(_a0 context.Context, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for LoadCtx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoader_LoadCtx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadCtx'
type MockLoader_LoadCtx_Call struct {
	*mock.Call
}

// LoadCtx is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 interface{}
func (_e *MockLoader_Expecter) LoadCtx(_a0 interface{}, _a1 interface{}) *MockLoader_LoadCtx_Call {
	return &MockLoader_LoadCtx_Call{Call: _e.mock.On("LoadCtx", _a0, _a1)}
}

func (_c *MockLoader_LoadCtx_Call) Run(run func(_a0 context.Context, _a1 interface{})) *MockLoader_LoadCtx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockLoader_LoadCtx_Call) Return(_a0 error) *MockLoader_LoadCtx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoader_LoadCtx_Call) RunAndReturn(run func(context.Context, interface{}) error) *MockLoader_LoadCtx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoader creates a new instance of MockLoader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoader {
	mock := &MockLoader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
