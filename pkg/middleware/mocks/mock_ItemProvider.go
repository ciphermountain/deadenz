// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	components "github.com/ciphermountain/deadenz/pkg/components"

	mock "github.com/stretchr/testify/mock"
)

// MockItemProvider is an autogenerated mock type for the ItemProvider type
type MockItemProvider struct {
	mock.Mock
}

type MockItemProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockItemProvider) EXPECT() *MockItemProvider_Expecter {
	return &MockItemProvider_Expecter{mock: &_m.Mock}
}

// Item provides a mock function with given fields: _a0
func (_m *MockItemProvider) Item(_a0 components.ItemType) (*components.Item, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Item")
	}

	var r0 *components.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(components.ItemType) (*components.Item, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(components.ItemType) *components.Item); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*components.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(components.ItemType) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockItemProvider_Item_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Item'
type MockItemProvider_Item_Call struct {
	*mock.Call
}

// Item is a helper method to define mock.On call
//   - _a0 components.ItemType
func (_e *MockItemProvider_Expecter) Item(_a0 interface{}) *MockItemProvider_Item_Call {
	return &MockItemProvider_Item_Call{Call: _e.mock.On("Item", _a0)}
}

func (_c *MockItemProvider_Item_Call) Run(run func(_a0 components.ItemType)) *MockItemProvider_Item_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(components.ItemType))
	})
	return _c
}

func (_c *MockItemProvider_Item_Call) Return(_a0 *components.Item, _a1 error) *MockItemProvider_Item_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockItemProvider_Item_Call) RunAndReturn(run func(components.ItemType) (*components.Item, error)) *MockItemProvider_Item_Call {
	_c.Call.Return(run)
	return _c
}

// Items provides a mock function with given fields:
func (_m *MockItemProvider) Items() ([]components.Item, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Items")
	}

	var r0 []components.Item
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]components.Item, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []components.Item); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]components.Item)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockItemProvider_Items_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Items'
type MockItemProvider_Items_Call struct {
	*mock.Call
}

// Items is a helper method to define mock.On call
func (_e *MockItemProvider_Expecter) Items() *MockItemProvider_Items_Call {
	return &MockItemProvider_Items_Call{Call: _e.mock.On("Items")}
}

func (_c *MockItemProvider_Items_Call) Run(run func()) *MockItemProvider_Items_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockItemProvider_Items_Call) Return(_a0 []components.Item, _a1 error) *MockItemProvider_Items_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockItemProvider_Items_Call) RunAndReturn(run func() ([]components.Item, error)) *MockItemProvider_Items_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockItemProvider creates a new instance of MockItemProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockItemProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockItemProvider {
	mock := &MockItemProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
