// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: pkg/proto/multiverse/multiverse.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MultiverseClient is the client API for Multiverse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiverseClient interface {
	PublishGameEvent(ctx context.Context, in *GameEvent, opts ...grpc.CallOption) (*Response, error)
	Events(ctx context.Context, in *Filter, opts ...grpc.CallOption) (Multiverse_EventsClient, error)
}

type multiverseClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiverseClient(cc grpc.ClientConnInterface) MultiverseClient {
	return &multiverseClient{cc}
}

func (c *multiverseClient) PublishGameEvent(ctx context.Context, in *GameEvent, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/multiverse.Multiverse/PublishGameEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiverseClient) Events(ctx context.Context, in *Filter, opts ...grpc.CallOption) (Multiverse_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Multiverse_ServiceDesc.Streams[0], "/multiverse.Multiverse/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &multiverseEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Multiverse_EventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type multiverseEventsClient struct {
	grpc.ClientStream
}

func (x *multiverseEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MultiverseServer is the server API for Multiverse service.
// All implementations must embed UnimplementedMultiverseServer
// for forward compatibility
type MultiverseServer interface {
	PublishGameEvent(context.Context, *GameEvent) (*Response, error)
	Events(*Filter, Multiverse_EventsServer) error
	mustEmbedUnimplementedMultiverseServer()
}

// UnimplementedMultiverseServer must be embedded to have forward compatible implementations.
type UnimplementedMultiverseServer struct {
}

func (UnimplementedMultiverseServer) PublishGameEvent(context.Context, *GameEvent) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishGameEvent not implemented")
}
func (UnimplementedMultiverseServer) Events(*Filter, Multiverse_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedMultiverseServer) mustEmbedUnimplementedMultiverseServer() {}

// UnsafeMultiverseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiverseServer will
// result in compilation errors.
type UnsafeMultiverseServer interface {
	mustEmbedUnimplementedMultiverseServer()
}

func RegisterMultiverseServer(s grpc.ServiceRegistrar, srv MultiverseServer) {
	s.RegisterService(&Multiverse_ServiceDesc, srv)
}

func _Multiverse_PublishGameEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiverseServer).PublishGameEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multiverse.Multiverse/PublishGameEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiverseServer).PublishGameEvent(ctx, req.(*GameEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Multiverse_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MultiverseServer).Events(m, &multiverseEventsServer{stream})
}

type Multiverse_EventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type multiverseEventsServer struct {
	grpc.ServerStream
}

func (x *multiverseEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

// Multiverse_ServiceDesc is the grpc.ServiceDesc for Multiverse service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Multiverse_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multiverse.Multiverse",
	HandlerType: (*MultiverseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishGameEvent",
			Handler:    _Multiverse_PublishGameEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _Multiverse_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/multiverse/multiverse.proto",
}
